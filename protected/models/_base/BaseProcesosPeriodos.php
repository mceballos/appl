<?php

/**
 * This is the model base class for the table "procesos_periodos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ProcesosPeriodos".
 *
 * Columns in table "procesos_periodos" available as properties of the model,
 * followed by relations of table "procesos_periodos" available as properties of the model.
 *
 * @property integer $alumno_rut
 * @property integer $periodo_id
 * @property integer $seccion_grado_id
 * @property integer $estado
 * @property integer $pago_pendiente
 * @property integer $promovido
 *
 * @property Compromisos[] $compromisoses
 * @property Alumnos $alumnoRut
 * @property Periodos $periodo
 * @property SeccionesGrados $seccionGrado
 */
abstract class BaseProcesosPeriodos extends GxActiveRecord {
	public $nombreCurso,$nombreCompleto,$dv;
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'procesos_periodos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Matricula|Matriculas', $n);
	}

	public static function representingColumn() {
		return 'alumno_rut';
	}

	public function rules() {
		return array(
			array('alumno_rut, periodo_id, seccion_grado_id', 'required'),
			array('alumno_rut, periodo_id, seccion_grado_id, estado, pago_pendiente, promovido', 'numerical', 'integerOnly'=>true),
			array('estado, pago_pendiente, promovido', 'default', 'setOnEmpty' => true, 'value' => null),
			array('alumno_rut, periodo_id, seccion_grado_id, estado, pago_pendiente, promovido,dv', 'safe', 'on'=>'search'),
			array('alumno_rut', 'checkRut','message'=>'El Rut ingresado no es valido. Ej:123456789-0'),
			array('alumno_rut', 'checkAlumno','message'=>'El Rut ingresado no se encuentra registrado como postulante.'),
			array('alumno_rut', 'UniqueAttributesValidator', 'with'=>'periodo_id','message'=>'{attribute} "{value}" Se ecuentra matriculado en esté periodo.'),
            
        );		
	
	}

	public function relations() {
		return array(
			'compromisoses' => array(self::HAS_MANY, 'Compromisos', 'proceso_periodo_id','condition' => 'compromisoses.estado = 1'),
			'alumnoRut' => array(self::BELONGS_TO, 'Alumnos', 'alumno_rut','condition' => 'alumnoRut.estado = 1'),
			'periodo' => array(self::BELONGS_TO, 'Periodos', 'periodo_id','condition' => 'periodo.estado = 1'),
			'seccionGrado' => array(self::BELONGS_TO, 'SeccionesGrados', 'seccion_grado_id','condition' => 'seccionGrado.estado = 1'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'alumno_rut' => Yii::t('app', 'Rut del Alumno'),
			'periodo_id' => Yii::t('app', 'Período'),
			'seccion_grado_id' => Yii::t('app', 'Curso '),
			'estado' => Yii::t('app', 'Estado'),
			'pago_pendiente' => Yii::t('app', 'Tiene Pagos Pendientes'),
			'promovido' => Yii::t('app', 'Promovido'),
			'compromisoses' => null,
			'alumnoRut' => null,
			'periodo' => null,
			'seccionGrado' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
        $criteria->with=array('alumnoRut');
		$criteria->compare('t.alumno_rut', $this->alumno_rut);
		$criteria->compare('t.periodo_id', Yii::app()->session['idPeriodo']);
		$criteria->compare('t.seccion_grado_id', $this->seccion_grado_id);
		$criteria->compare('t.estado', 1);
		$criteria->compare('t.pago_pendiente', $this->pago_pendiente);
		$criteria->compare('t.promovido', $this->promovido);
        if(isset($_GET['ProcesosPeriodos'])){
            if(isset($_GET['ProcesosPeriodos']['dv']))
                if(!is_null($_GET['ProcesosPeriodos']['dv']))
                    $criteria->compare('alumnoRut.dv', $_GET['ProcesosPeriodos']['dv']);
        }
        
		//$criteria->condition='t.periodo_id='.Yii::app()->session['idPeriodo'];

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	public function searchCursos() {
			$criteria = new CDbCriteria;
			//$criteria->compare('nombreCurso', $this->nombreCurso);
			//$criteria->compare('seccion_grado_id', $this->seccion_grado_id, true);
			//$criteria->compare('secciones_grados.id', $this->secciones_grados.id);
			//$criteria->compare('alumno_rut', $this->alumno_rut);
			//$criteria->compare('nombreCompleto', $this->nombreCompleto);

			$criteria->join = ' INNER JOIN alumnos ON (t.alumno_rut = alumnos.rut)
								INNER JOIN secciones_grados ON (t.seccion_grado_id = secciones_grados.id)
								INNER JOIN secciones ON ( secciones_grados.seccion_id = secciones.id)
								INNER JOIN grados ON(secciones_grados.grado_id = grados.id)';
			$criteria->distinct =true;
			$criteria->select= "t.seccion_grado_id,t.id,
								secciones_grados.id,
								concat (secciones.nombre,'-',grados.nombre) as nombreCurso,
								t.alumno_rut,
								concat(alumnos.apellido_paterno,' ',alumnos.apellido_materno,' ',alumnos.nombre) as nombreCompleto";
			
			$criteria->condition = "t.periodo_id =".Yii::app()->session['idPeriodo']." AND 
									t.estado = 1 AND secciones_grados.estado = 1";
			
			$criteria->addCondition('t.seccion_grado_id = :seccion_grado_id'); // add your sql WHERE condition
			$criteria->params[':seccion_grado_id'] = $this->seccion_grado_id; // bind your parameter
			
			return new CActiveDataProvider(get_class($this), array(
			'criteria' => $criteria,
			'sort'=>array(
                'defaultOrder'=>'alumnos.apellido_paterno ASC,alumnos.apellido_materno ASC,alumnos.nombre ASC',
            ),
            'pagination' => array('pageSize' => 60,)
			));
	}

	public function checkAlumno($attribute,$params){
	 
    	$rut=$this->alumno_rut;
        
        $validar=Alumnos::model()->findAll(array('condition'=>'estado=1 AND rut='.$rut));
        if(isset($validar[0])){
            return true;
        }else{
            if(!$this->hasErrors($attribute))
                    $this->addError($attribute, $params['message']);
            return false;
        }   
		
     	
		
	}
    public function checkRut($attribute,$params){
        $rut=$this->alumno_rut;
        $digito_verificador=null;//$this->DV;
        if(isset($_POST['ProcesosPeriodos'])){
            if(isset($_POST['ProcesosPeriodos']['DV'])){
                if(!is_null($_POST['ProcesosPeriodos']['DV'])){
                    $digito_verificador=$_POST['ProcesosPeriodos']['DV'];
                }
            }
        }
        /* Preparar dígito verificador */
          $digito_ingresado = strtoupper($digito_verificador);
          $posibles_valores = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'K');         
          /* Sólo si $rut es natural y $digito_ingresado está en $posibles_valores */
          if ($rut > 0 && in_array($digito_ingresado, $posibles_valores)){
            /* Calcular el digito verificador del rut ingresado */
            $d = 1;
            for ($x = 0; $rut != 0; $rut /= 10)
              $d = ($d + $rut % 10 * (9 - $x++ % 6)) % 11;
            
            
            $digito_calculado = chr($d ? $d + 47 : 75);
            
            /* Comparar el digito ingresado con el digito calculado */
            if ($digito_calculado == $digito_ingresado){
                //return true;
            } else{
              /* el digito ingresado es incorrecto */
              //return false;
              if(!$this->hasErrors("alumno_rut"))
                    $this->addError("alumno_rut", $params['message']);
            }
          } else{
            /* $rut no es natural o bien $digito_ingresado no está en $posibles_valores */
            //return false;
            if(!$this->hasErrors("alumno_rut"))
                    $this->addError("alumno_rut", $params['message']);
          }
    }

}