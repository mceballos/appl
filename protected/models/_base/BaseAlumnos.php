<?php

/**
 * This is the model base class for the table "alumnos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Alumnos".
 *
 * Columns in table "alumnos" available as properties of the model,
 * followed by relations of table "alumnos" available as properties of the model.
 *
 * @property integer $rut
 * @property string $dv
 * @property string $nombre
 * @property string $apellido_paterno
 * @property string $apellido_materno
 * @property string $fecha_nacimiento
 * @property string $lugar_nacimiento
 * @property string $vive_con
 * @property string $direccion_particular
 * @property string $villa_poblacion
 * @property integer $comuna_id
 * @property string $telefono_particular
 * @property string $correo_electronico
 * @property string $colegio_proveniente
 * @property integer $ciudad_colegio_id
 * @property string $nombre_isapre
 * @property string $fonasa_tramo
 * @property string $tratamiento_medico
 * @property string $alergico_medicamento
 * @property integer $num_hermanos_en_establecimiento
 * @property string $fecha_actualizacion 
 * @property integer $estado
 * @property integer $apoderado_rut
 * @property integer $padre_rut
 * @property integer $madre_rut
 * @property string $rut_serie
  
 * @property Comuna $comuna
 * @property Encargados $apoderadoRut
 * @property Encargados $madreRut
 * @property Encargados $padreRut
 * @property ProcesosPeriodos $procesosPeriodos
 */
abstract class BaseAlumnos extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'alumnos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Postulante|Postulantes', $n);
	}

	public static function representingColumn() {
		return 'rut';
	}

	public function rules() {
		return array(
			array('rut,dv, nombre, apellido_paterno, apellido_materno, fecha_nacimiento, apoderado_rut,vive_con,direccion_particular,comuna_id', 'required'),
			array('rut, comuna_id, num_hermanos_en_establecimiento, estado, apoderado_rut, padre_rut, madre_rut', 'numerical', 'integerOnly'=>true),
			array('dv', 'length', 'max'=>1),
			array('nombre, direccion_particular, villa_poblacion, colegio_proveniente, tratamiento_medico, alergico_medicamento', 'length', 'max'=>200),
			array('apellido_paterno, apellido_materno, lugar_nacimiento, vive_con, nombre_isapre,ciudad_colegio', 'length', 'max'=>50),
			array('telefono_particular', 'length', 'max'=>12),
			array('fonasa_tramo', 'length', 'max'=>2),
			array('rut_serie', 'length', 'max'=>20),
			array('fecha_nacimiento', 'type', 'type' => 'date', 'message' => '{attribute}: No es correcto!', 'dateFormat' => 'yyyy-mm-dd'),//yyyy-mm-dd / dd-mm-yyyy
			array('correo_electronico', 'email','checkMX'=>true), 
			array('rut, lugar_nacimiento, vive_con, direccion_particular, villa_poblacion, comuna_id, telefono_particular, correo_electronico, colegio_proveniente, ciudad_colegio, nombre_isapre, fonasa_tramo, tratamiento_medico, alergico_medicamento, num_hermanos_en_establecimiento, estado, padre_rut, madre_rut, rut_serie', 'default', 'setOnEmpty' => true, 'value' => null),
			array('rut, dv, nombre, apellido_paterno, apellido_materno, fecha_nacimiento, lugar_nacimiento, vive_con, direccion_particular, villa_poblacion, comuna_id, telefono_particular, correo_electronico, colegio_proveniente, ciudad_colegio, nombre_isapre, fonasa_tramo, tratamiento_medico, alergico_medicamento, num_hermanos_en_establecimiento, fecha_actualizacion, estado, apoderado_rut, padre_rut, madre_rut, rut_serie', 'safe', 'on'=>'search'),
			array('rut','unique','message'=>'{attribute} : {value}  ya se encuentra en nuestros registros. Favor ingrese otro Rut'),
			array('rut', 'checkRut','message'=>'El Rut ingresado no es valido. Ej:123456789-0'),
			array('apoderado_rut', 'checkRut','message'=>'El Rut ingresado no es valido. Ej:123456789-0'),
			array('padre_rut', 'checkRut','message'=>'El Rut ingresado no es valido. Ej:123456789-0'),
			array('madre_rut', 'checkRut','message'=>'El Rut ingresado no es valido. Ej:123456789-0'),
			array('apoderado_rut', 'checkRutAsEncargado','message'=>'El Rut ingresado no se encuentra almacenado en nuestros registros. Favor ingreselo previamente'),
            array('padre_rut', 'checkRutAsEncargado','message'=>'El Rut ingresado no se encuentra almacenado en nuestros registros. Favor ingreselo previamente'),
            array('madre_rut', 'checkRutAsEncargado','message'=>'El Rut ingresado no se encuentra almacenado en nuestros registros. Favor ingreselo previamente'),
		);
	}

	public function relations() {
		return array(			
			'comuna' => array(self::BELONGS_TO, 'Comuna', 'comuna_id','condition' => 'comuna.estado = 1'),
			'apoderadoRut' => array(self::BELONGS_TO, 'Encargados', 'apoderado_rut','condition' => 'apoderadoRut.estado = 1'),
			'madreRut' => array(self::BELONGS_TO, 'Encargados', 'madre_rut','condition' => 'madreRut.estado = 1'),
			'padreRut' => array(self::BELONGS_TO, 'Encargados', 'padre_rut','condition' => 'padreRut.estado = 1'),
			'procesosPeriodos' => array(self::HAS_ONE, 'ProcesosPeriodos', 'alumno_rut','condition' => 'procesosPeriodos.estado = 1'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'rut' => Yii::t('app', 'Rut'),
			'dv' => Yii::t('app', 'Dv'),
			'nombre' => Yii::t('app', 'Nombre'),
			'apellido_paterno' => Yii::t('app', 'Apellido Paterno'),
			'apellido_materno' => Yii::t('app', 'Apellido Materno'),
			'fecha_nacimiento' => Yii::t('app', 'Fecha Nacimiento'),
			'lugar_nacimiento' => Yii::t('app', 'Ciudad de Nacimiento'),
			'vive_con' => Yii::t('app', 'Vive Con'),
			'direccion_particular' => Yii::t('app', 'Direccion Particular'),
			'villa_poblacion' => Yii::t('app', 'Villa Poblacion'),
			'comuna_id' => null,
			'telefono_particular' => Yii::t('app', 'Telefono Particular'),
			'correo_electronico' => Yii::t('app', 'Correo Electronico'),
			'colegio_proveniente' => Yii::t('app', 'Colegio Proveniente'),
			'ciudad_colegio' => Yii::t('app', 'Ciudad Colegio'),
			'nombre_isapre' => Yii::t('app', 'Nombre Isapre'),
			'fonasa_tramo' => Yii::t('app', 'Fonasa Tramo'),
			'tratamiento_medico' => Yii::t('app', 'Tratamiento Medico'),
			'alergico_medicamento' => Yii::t('app', 'Alergico Medicamento'),
			'num_hermanos_en_establecimiento' => Yii::t('app', 'NÃºmero De  Hermanos En El Establecimiento'),
			'fecha_actualizacion' => Yii::t('app', 'Fecha Actualizacion'),			
			'estado' => Yii::t('app', 'Estado'),
			'apoderado_rut' => Yii::t('app', 'Rut Apoderado'),
			'padre_rut' => Yii::t('app', 'Rut Padre'),
			'madre_rut' => Yii::t('app', 'Rut Madre'),
			'rut_serie' => Yii::t('app', 'Rut Serie'),			
			'comuna' => null,
			'apoderadoRut' =>  Yii::t('app', 'Rut Apoderado'),
			'madreRut' => Yii::t('app', 'Rut Madre'),
			'padreRut' => Yii::t('app', 'Rut Padre'),
			'procesosPeriodos' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('rut', $this->rut);
		$criteria->compare('dv', $this->dv, true);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('apellido_paterno', $this->apellido_paterno, true);
		$criteria->compare('apellido_materno', $this->apellido_materno, true);
		$criteria->compare('fecha_nacimiento', $this->fecha_nacimiento, true);
		$criteria->compare('lugar_nacimiento', $this->lugar_nacimiento, true);
		$criteria->compare('vive_con', $this->vive_con, true);
		$criteria->compare('direccion_particular', $this->direccion_particular, true);
		$criteria->compare('villa_poblacion', $this->villa_poblacion, true);
		$criteria->compare('comuna_id', $this->comuna_id);
		$criteria->compare('telefono_particular', $this->telefono_particular, true);
		$criteria->compare('correo_electronico', $this->correo_electronico, true);
		$criteria->compare('colegio_proveniente', $this->colegio_proveniente, true);
		$criteria->compare('ciudad_colegio', $this->ciudad_colegio);
		$criteria->compare('nombre_isapre', $this->nombre_isapre, true);
		$criteria->compare('fonasa_tramo', $this->fonasa_tramo, true);
		$criteria->compare('tratamiento_medico', $this->tratamiento_medico, true);
		$criteria->compare('alergico_medicamento', $this->alergico_medicamento, true);
		$criteria->compare('num_hermanos_en_establecimiento', $this->num_hermanos_en_establecimiento);
		$criteria->compare('fecha_actualizacion', $this->fecha_actualizacion, true);		
		$criteria->compare('estado', 1);
		$criteria->compare('apoderado_rut', $this->apoderado_rut);
		$criteria->compare('padre_rut', $this->padre_rut);
		$criteria->compare('madre_rut', $this->madre_rut);
		$criteria->compare('rut_serie', $this->rut_serie, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

    /*public function getNombreYRutArray(){
        return array($this->apellido_paterno.' '.$this->apellido_materno.' '.$this->nombre,$this->rut.'-'.$this->dv);   
    }*/
    
    public function getRutCompleto(){
        return $this->rut.'-'.$this->dv;           
    }
    
    public function getRutNombre(){
        return $this->apellido_paterno.' '.$this->apellido_materno.' '.$this->nombre.' ('.$this->rut.'-'.$this->dv.')';           
    }
    
    
    public function checkRutAsEncargado($attribute,$params){
        $rut=null;
        if($attribute=="apoderado_rut"){
            $rut=$this->apoderado_rut;
        }else if($attribute=="madre_rut"){
            $rut=$this->madre_rut;
        }else if($attribute=="padre_rut"){
            $rut=$this->padre_rut;
        }else{
            return false;
        }
        
        $validar=Encargados::model()->findAll(array('condition'=>'estado=1 AND rut='.$rut));
        if(isset($validar[0])){
            return true;
        }else{
            if(!$this->hasErrors($attribute))
                    $this->addError($attribute, $params['message']);
            return false;
        }        
    }
    
    public function checkRut($attribute,$params){        
        $rut=null;
        $digito_verificador=null;//$this->DV;
        if(isset($_POST['Alumnos']) && $attribute=="rut"){
            if(isset($_POST['Alumnos']['dv'])){
                $rut=$this->rut;
                if(!is_null($_POST['Alumnos']['dv'])){
                    $digito_verificador=$_POST['Alumnos']['dv'];
                }
            }
        }else if(isset($_POST['Alumnos']) && $attribute=="apoderado_rut"){
            if(isset($_POST['Alumnos']['apoderado_dv'])){
                $rut=$this->apoderado_rut;
                if(!is_null($_POST['Alumnos']['apoderado_dv'])){
                    $digito_verificador=$_POST['Alumnos']['apoderado_dv'];
                }
            }
        }else if(isset($_POST['Alumnos']) && $attribute=="madre_rut"){
            if(isset($_POST['Alumnos']['madre_dv'])){
                $rut=$this->madre_rut;
                if(!is_null($_POST['Alumnos']['madre_dv'])){
                    $digito_verificador=$_POST['Alumnos']['madre_dv'];
                }
            }
        }else if(isset($_POST['Alumnos']) && $attribute=="padre_rut"){
            if(isset($_POST['Alumnos']['padre_dv'])){
                $rut=$this->padre_rut;
                if(!is_null($_POST['Alumnos']['padre_dv'])){
                    $digito_verificador=$_POST['Alumnos']['padre_dv'];
                }
            }
        }
        if($rut==null){
            return true;
        }
        /* Preparar dÃ­gito verificador */
          $digito_ingresado = strtoupper($digito_verificador);
          $posibles_valores = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'K');         
          /* SÃ³lo si $rut es natural y $digito_ingresado estÃ¡ en $posibles_valores */
          if ($rut > 0 && in_array($digito_ingresado, $posibles_valores)){
            /* Calcular el digito verificador del rut ingresado */
            $d = 1;
            for ($x = 0; $rut != 0; $rut /= 10)
              $d = ($d + $rut % 10 * (9 - $x++ % 6)) % 11;
            
            
            $digito_calculado = chr($d ? $d + 47 : 75);
            
            /* Comparar el digito ingresado con el digito calculado */
            if ($digito_calculado == $digito_ingresado){
                //return true;
            } else{
              /* el digito ingresado es incorrecto */
              //return false;
              if(!$this->hasErrors($attribute))
                    $this->addError($attribute, $params['message']);
            }
          } else{
            /* $rut no es natural o bien $digito_ingresado no estÃ¡ en $posibles_valores */
            //return false;
            if(!$this->hasErrors($attribute))
                    $this->addError($attribute, $params['message']);
          }
    }
    
}